import java.util.*

class Watchdog {
    private val timer = Timer()
    private val evaluator = Evaluator()

    private var _maxTime: Long = 10L

    fun setMaxTime(maxTime: Long) {
        _maxTime = maxTime
    }
    private var onTimerFinishedCallback: (() -> Unit)? = null
    /**
     * Function that will set the callback that will be invoked when the timer finishes
     * This function was generated by ChatGPT
     */
    fun setOnTimerFinishedCallback(callback: () -> Unit) {
        onTimerFinishedCallback = callback
    }


    /**
     * Function that will stop the program after ceratin amount of time
     */
    fun startTimer() {
        val task = object : TimerTask() {
            override fun run() {
                println("Timeout!")
                printFinalResults()
                stopTimer()
                onTimerFinishedCallback?.invoke()
                System.exit(0)
            }
        }

        timer.schedule(task, _maxTime * 1000)
    }

    fun stopTimer() {
        timer.cancel()
    }

    /**
     * Function that will print the final results
     */
    private fun printFinalResults() {
        for ((key, value) in GlobalScope.bestTimetable) {
            for (i in 0..4) {
                for (j in 0..9) {
                    print(GlobalScope.printMap(key[i][j].name, GlobalScope.listOfSubjects) + " ")
                }
                println()
            }
            println("Score of this timetable: $value")
        }
        println("Number of generated timetables: ${GlobalScope.listOfTimetables.size}")
        println("Number of evaluated timetables: ${GlobalScope.setOfHashCodes.size}")
        println("Number of better timetables than the initial one: ${evaluator.getCounter()}")
    }
}
